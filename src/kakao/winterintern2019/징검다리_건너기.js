function solution(stones, k) {
  let answer = 0;

  while (true) {
    let flag = true;

    for (let i = 0; i < stones.length; i++) {
      // check skip
      if (stones[i] <= 0) {
        let skip = 1;

        for (let j = i + 1; j < stones.length; j++) {
          if (skip >= k) {
            flag = false;
            break;
          }

          if (stones[j] <= 0) {
            skip++;
          } else {
            break;
          }
        }

        i += skip;
      }

      if (i < stones.length) stones[i]--;
    }

    if (!flag) break;
    answer++;
  }

  console.log(answer);
  return answer;
}

solution([2, 4, 5, 3, 2, 1, 4, 2, 5, 1], 3);

/**
 * 2021-06-30
 * 구현하는 것은 무난하지만
 * 효율성은 어떻게 접근해야하는지 감도 안온다.
 * 기본기 학습이 중요..
 * 
 * 채점을 시작합니다.
정확성  테스트
테스트 1 〉	실패 (시간 초과)
테스트 2 〉	통과 (0.09ms, 30.3MB)
테스트 3 〉	실패 (0.11ms, 30.1MB)
테스트 4 〉	통과 (0.11ms, 30.2MB)
테스트 5 〉	통과 (0.17ms, 29.8MB)
테스트 6 〉	통과 (3.80ms, 32.8MB)
테스트 7 〉	통과 (7.06ms, 32.8MB)
테스트 8 〉	통과 (7.02ms, 32.7MB)
테스트 9 〉	통과 (7.18ms, 32.7MB)
테스트 10 〉	통과 (0.21ms, 30MB)
테스트 11 〉	통과 (0.13ms, 30.2MB)
테스트 12 〉	통과 (0.28ms, 30.1MB)
테스트 13 〉	통과 (0.94ms, 30.2MB)
테스트 14 〉	통과 (5.54ms, 32.6MB)
테스트 15 〉	통과 (7.00ms, 32.7MB)
테스트 16 〉	통과 (7.12ms, 32.8MB)
테스트 17 〉	통과 (7.24ms, 32.7MB)
테스트 18 〉	통과 (0.17ms, 30.2MB)
테스트 19 〉	통과 (0.74ms, 30MB)
테스트 20 〉	통과 (3.43ms, 32.7MB)
테스트 21 〉	통과 (3.74ms, 32.7MB)
테스트 22 〉	통과 (4.76ms, 32.7MB)
테스트 23 〉	통과 (7.19ms, 32.6MB)
테스트 24 〉	통과 (7.13ms, 32.6MB)
테스트 25 〉	통과 (0.10ms, 30.1MB)
효율성  테스트
테스트 1 〉	실패 (시간 초과)
테스트 2 〉	실패 (시간 초과)
테스트 3 〉	실패 (시간 초과)
테스트 4 〉	실패 (시간 초과)
테스트 5 〉	실패 (시간 초과)
테스트 6 〉	실패 (시간 초과)
테스트 7 〉	실패 (시간 초과)
테스트 8 〉	실패 (시간 초과)
테스트 9 〉	실패 (시간 초과)
테스트 10 〉	실패 (시간 초과)
테스트 11 〉	실패 (시간 초과)
테스트 12 〉	실패 (시간 초과)
테스트 13 〉	실패 (시간 초과)
테스트 14 〉	실패 (시간 초과)
채점 결과
정확성: 59.0
효율성: 0.0
합계: 59.0 / 100.0
 */
