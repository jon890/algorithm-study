/**
 * 2021-08-22
 * 시간에 대한 제약이 빡빡하지 않아서 무지성으로 통과하였다.
 * 필요한 만큼만 사용하는 방법이 필요할듯 한데 나중에 고민해보기로..
 * 채점을 시작합니다.
정확성  테스트
테스트 1 〉	통과 (24.19ms, 37MB)
테스트 2 〉	통과 (15.01ms, 36.5MB)
테스트 3 〉	통과 (14.92ms, 36.4MB)
테스트 4 〉	통과 (15.03ms, 36.4MB)
테스트 5 〉	통과 (24.07ms, 37MB)
테스트 6 〉	통과 (23.92ms, 36.9MB)
테스트 7 〉	통과 (24.20ms, 36.8MB)
테스트 8 〉	통과 (16.94ms, 36.3MB)
테스트 9 〉	통과 (16.95ms, 36.5MB)
테스트 10 〉	통과 (26.57ms, 36.6MB)
테스트 11 〉	통과 (15.05ms, 36.3MB)
테스트 12 〉	통과 (15.09ms, 36.4MB)
테스트 13 〉	통과 (14.95ms, 36.4MB)
테스트 14 〉	통과 (17.94ms, 36.7MB)
테스트 15 〉	통과 (17.92ms, 36.5MB)
테스트 16 〉	통과 (18.04ms, 36.8MB)
테스트 17 〉	통과 (20.68ms, 36.7MB)
테스트 18 〉	통과 (15.16ms, 36.4MB)
테스트 19 〉	통과 (17.72ms, 36.5MB)
테스트 20 〉	통과 (15.37ms, 36.2MB)
테스트 21 〉	통과 (17.91ms, 36.8MB)
테스트 22 〉	통과 (20.74ms, 36.6MB)
테스트 23 〉	통과 (18.29ms, 36.7MB)
테스트 24 〉	통과 (23.31ms, 37.1MB)
테스트 25 〉	통과 (26.95ms, 37.2MB)
테스트 26 〉	통과 (17.90ms, 36.6MB)
채점 결과
정확성: 100.0
합계: 100.0 / 100.0
 */

function solution(n, t, m, p) {
  let answer = '';
  let string = '';

  // 최적화 필요!!
  // 시간 제한은 딱히 없어서 정답으로 처리되었다
  for (let i = 0; i <= 50000; i++) {
    string += i.toString(n);
  }

  for (let i = 0; i < string.length; i++) {
    if (answer.length === t) break;

    const isTurn = (i + 1) % m === p % m;
    if (isTurn) answer += string[i];
  }

  answer = answer.toUpperCase();
  console.log(answer);
  return answer;
}

// 진법 n
// 미리 구할 숫자의 갯수 t
// 게임 인원 m
// 튜브의 순서 p
// 각 해당 진법으로 1000개를 만들어도 괜찮을듯..?

solution(2, 4, 2, 1);
solution(16, 16, 2, 1);
solution(16, 16, 2, 2);
